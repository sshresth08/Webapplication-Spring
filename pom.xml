<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>de.thk.rwoerzbe</groupId>
	<artifactId>toolbox</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>toolbox</name>
	<description>Toolbox</description>
	<!-- Define project-wide properties such as Java version and SonarQube credentials -->
	<properties>
		<java.version>17</java.version>
		<!-- Pin the maven-compiler-plugin generate class files to a certain ${java.version}.
			 Only Java Runtime Environment of equal or higher versions can execute these class files. 
		     If unsure, you can verify the Java version of a class file like so:
			 echo $(( $(javap -v ./target/classes/de/thk/rwoerzbe/toolbox/ToolboxApplication.class | grep "major version" | awk '{print $NF}') - 44 )) -->
		<maven.compiler.release>${java.version}</maven.compiler.release>
		<surefire.version>3.1.2</surefire.version>
		<!-- valid for local SonarQube servers -->
		<sonar.login>admin</sonar.login>
		<sonar.password>admin123</sonar.password>
		<sonar.projectName>toolbox-${env.USERNAME}</sonar.projectName>
	</properties>

	<build>
		<!-- Manage plugins' versions and configurations for build processes -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${surefire.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-report-plugin</artifactId>
					<version>${surefire.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>3.4.5</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.7.1</version>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.10</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>3.7.0.1746</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>
				<!-- TODO add a JavaDoc plugin -->
				<plugin>
            		<groupId>org.apache.maven.plugins</groupId>
            		<artifactId>maven-javadoc-plugin</artifactId>
            		<version>3.3.1</version>
            		<configuration>
                		<sourcepath>src\main\java</sourcepath>
                		<failOnError>false</failOnError>
            		</configuration>
            		<executions>
                		<execution>
                    		<id>generate-javadoc</id>
                    		<phase>package</phase>
                    		<goals>
                        		<goal>javadoc</goal>
                    		</goals>
                		</execution>
            		</executions>
        		</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.cloud</groupId>
				<artifactId>spring-cloud-gcp-dependencies</artifactId>
				<version>4.7.2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-java</artifactId>
				<version>4.12.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<!-- Define configurations and dependencies for the standalone profile -->
		<profile>
			<id>standalone</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>spring.profiles.active</name>
					<value>standalone</value>
				</property>
			</activation>
			<properties>
				<spring.profile.from.maven>standalone</spring.profile.from.maven>
			</properties>
			<dependencies>
				<dependency>
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
			<!-- Configure build plugins for the standalone profile -->
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>autotest</id>
			<activation>
				<property>
					<name>spring.profiles.active</name>
					<value>autotest</value>
				</property>
			</activation>
			<properties>
				<spring.profile.from.maven>autotest</spring.profile.from.maven>
				<maven.test.failure.ignore>true</maven.test.failure.ignore>
			</properties>
			<dependencies>
				<dependency>
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>start_app</id>
								<goals>
									<goal>start</goal>
								</goals>
								<phase>pre-integration-test</phase>
							</execution>
							<execution>
								<id>stop_app</id>
								<goals>
									<goal>stop</goal>
								</goals>
								<phase>post-integration-test</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<!-- Define property transformation using regex for directory format -->
							<execution>
								<id>regex-property</id>
								<goals>
									<goal>regex-property</goal>
								</goals>
								<configuration>
									<name>formatted.basedir</name>
									<value>${project.basedir}</value>
									<regex>\\</regex>
									<replacement>/</replacement>
									<failIfNoMatch>false</failIfNoMatch>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>execute-chrome-setup</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<skip>${seleniumtest.skip}</skip>
									<executable>bash</executable>
									<arguments>
										<argument>-c</argument>
										<argument>'${formatted.basedir}/download_chromedriver.sh'</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>kill-chromedriver</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>bash</executable>
									<skip>${seleniumtest.skip}</skip>
									<arguments>
										<argument>-c</argument>
										<argument>'${formatted.basedir}/killChromedriver.sh'</argument>
									</arguments>
									<successCodes>
										<successCode>0</successCode>
										<!-- if there is no driver to kill -->
										<successCode>1</successCode>
									</successCodes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<executions>
							<execution>
								<!-- reconfigure default-test execution to exclude Selenium test in
								test phase -->
								<id>default-test</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<excludes>
										<exclude>**/*SeleniumTest.java</exclude>
									</excludes>
								</configuration>
							</execution>
							<execution>
								<!-- run only Selenium tests in integration test phase -->
								<id>selenium-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skipTests>${seleniumtest.skip}</skipTests>
									<includes>
										<include>**/*SeleniumTest.java</include>
									</includes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
							<!-- TODO add <execution> to enforce code coverage -->
							<execution>
            					<id>enforce-code-coverage</id>
            					<phase>prepare-package</phase>
            					<goals>
                					<goal>check</goal>
            					</goals>
            					<configuration>
                					<includes>
                    					<include>*Service.*</include>
               						</includes>
                					<rules>
                    					<rule>
                        					<element>CLASS</element>
                        					<includes>
                            					<include>*Service</include>
                        					</includes>
                        					<limits>
                            					<limit>
                                					<counter>INSTRUCTION</counter>
                                					<value>COVEREDRATIO</value>
                                					<minimum>0.85</minimum>
                            					</limit>
                        					</limits>
                    					</rule>
                					</rules>
									<haltOnFailure>false</haltOnFailure>
            					</configuration>
        					</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-site-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-report-plugin</artifactId>
					</plugin>
					<!-- TODO Add a JavaDoc plugin -->
					<plugin>
    					<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-javadoc-plugin</artifactId>
    					<version>3.3.1</version>
					</plugin>
				</plugins>
			</reporting>
		</profile>
		<profile>
			<id>googleclouddeploy</id>
			<activation>
				<property>
					<name>spring.profiles.active</name>
					<value>googleclouddeploy</value>
				</property>
			</activation>
			<properties>
				<spring.profile.from.maven>googleclouddeploy</spring.profile.from.maven>
			</properties>
			<dependencies>
				<dependency>
					<groupId>com.google.cloud</groupId>
					<artifactId>spring-cloud-gcp-starter-sql-postgresql</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>